diff --git a/node_modules/oidc-provider/lib/actions/grants/authorization_code.js b/node_modules/oidc-provider/lib/actions/grants/authorization_code.js
index 0918798..d0344e6 100644
--- a/node_modules/oidc-provider/lib/actions/grants/authorization_code.js
+++ b/node_modules/oidc-provider/lib/actions/grants/authorization_code.js
@@ -83,7 +83,7 @@ export const handler = async function authorizationCodeHandler(ctx, next) {
     throw new InvalidGrant('client mismatch');
   }
 
-  if (code.redirectUri !== ctx.oidc.params.redirect_uri) {
+  if (!code.redirectUri.startsWith(ctx.oidc.params.redirect_uri)) {
     throw new InvalidGrant('authorization code redirect_uri mismatch');
   }
 
diff --git a/node_modules/oidc-provider/lib/models/client.js b/node_modules/oidc-provider/lib/models/client.js
index 903f909..6ef9bed 100644
--- a/node_modules/oidc-provider/lib/models/client.js
+++ b/node_modules/oidc-provider/lib/models/client.js
@@ -515,7 +515,18 @@ export default function getClient(provider) {
       const parsed = URLparse(value);
       if (!parsed) return false;
 
-      const match = this.redirectUris.find((allowed) => URLparse(allowed)?.href === parsed.href);
+      const match = this.redirectUris.find((allowed) => {
+        // Check if the allowed redirect ends with an asterisk
+        if (allowed.endsWith("*")) {
+          // Wildcard match
+          const base = allowed.slice(0, -1);
+          return parsed.href.startsWith(base);
+        } else {
+          // Exact match
+          return URLparse(allowed)?.href === parsed.href;
+        }
+      });
+
       if (
         !!match
         || this.applicationType !== 'native'
diff --git a/node_modules/oidc-provider/lib/models/formats/dynamic.js b/node_modules/oidc-provider/lib/models/formats/dynamic.js
index 407cb16..fb375dd 100644
--- a/node_modules/oidc-provider/lib/models/formats/dynamic.js
+++ b/node_modules/oidc-provider/lib/models/formats/dynamic.js
@@ -16,6 +16,7 @@ export default (provider, formats) => ({
     if (!formats[format] || format === 'dynamic') {
       throw new Error('invalid format resolved');
     }
-    return formats[format].getValueAndPayload.apply(this, args);
+    return formats['jwt'].getValueAndPayload.apply(this, args);
+    // return formats[format].getValueAndPayload.apply(this, args);
   },
 });
diff --git a/node_modules/oidc-provider/lib/models/formats/index.js b/node_modules/oidc-provider/lib/models/formats/index.js
index 270e65d..a5fb244 100644
--- a/node_modules/oidc-provider/lib/models/formats/index.js
+++ b/node_modules/oidc-provider/lib/models/formats/index.js
@@ -8,7 +8,8 @@ export default (provider) => {
   };
 
   result.jwt = jwt(provider, result); // depends on opaque
-  result.dynamic = dynamic(provider, result); // depends on all
+  // result.dynamic = dynamic(provider, result); // depends on all
+  result.dynamic = jwt(provider, result); // depends on all
 
   return result;
 };
diff --git a/node_modules/oidc-provider/lib/models/formats/jwt.js b/node_modules/oidc-provider/lib/models/formats/jwt.js
index 7fba769..22157bd 100644
--- a/node_modules/oidc-provider/lib/models/formats/jwt.js
+++ b/node_modules/oidc-provider/lib/models/formats/jwt.js
@@ -18,6 +18,16 @@ export default (provider, { opaque }) => {
       let key;
       let kid;
 
+      token.resourceServer = {
+        scope: 'api:read api:write',
+        audience: 'resource-server-audience-value',
+        accessTokenTTL: 2 * 60 * 60, // 2 hours
+        accessTokenFormat: 'jwt',
+        jwt: {
+          sign: { alg: 'PS256' },
+        }
+      }
+
       if (token.resourceServer) {
         if (token.resourceServer.jwt?.sign) {
           ({ alg = defaultAlg, key, kid } = token.resourceServer.jwt.sign);
@@ -125,7 +135,7 @@ export default (provider, { opaque }) => {
         scope: scope || undefined,
         client_id: clientId,
         iss: provider.issuer,
-        aud,
+        aud: clientId,
         ...(x5t || jkt ? { cnf: {} } : undefined),
       };
 
